import { Observable } from 'rxjs';

/**
 * Instantiates a JavaScript loader for WebAssembly, generated by Emscripten
 * @param url the URL to the generated JavaScript loader
 * @param moduleObj optional module options
 */
export function instantiateJs(url: string, moduleObj?: EmModule): Observable<string> {
  const script = document.createElement('script');
  script.id = 'emscripten';
  script.async = true;
  document.body.appendChild(script);

  if (moduleObj) {
    window.Module = moduleObj;
  }

  return new Observable<string>(subscriber => {
    script.onload = () => {
      subscriber.next(script.innerHTML);
      subscriber.complete();
    };
    script.onerror = (ev: ErrorEvent) => subscriber.error(ev.error);
    script.src = url;
  });
}

/**
 * Exits the active Emscripten environment by calling exit()
 */
export function exitActiveEnvironment() {
  if (!window.Module) {
    throw Error('No active Emscripten environment found');
  }

  const mod = window.Module;
  mod.noExitRuntime = false;
  try {
    mod.exit(0);
  } catch (err) {
    if (err.name !== 'ExitStatus') {
      throw err;
    }
  }

  window.Module = null;

  // Remove the associated loader
  const script = document.getElementById('emscripten');
  if (script) {
    document.body.removeChild(script);
  }
}

/**
 * Creates a danew data file in the memory
 * @param fileName the file name
 * @param inputArray the file contents
 */
export function createDataFile(fileName: string, inputArray: Uint8Array, canRead?: boolean, canWrite?: boolean) {
  try {
    FS.createDataFile('/', fileName, inputArray, canRead, canWrite);
  } catch (err) {
    if (err.code !== 'EEXIST') {
      throw err;
    }
  }
}

/**
 * Reads a file from the memory as a text
 * @param fileName the file name
 */
export function readTextFile(fileName: string): string {
  return FS.readFile(fileName, { encoding: 'utf8' });
}

/**
 * Reads a string from the HEAP
 * @param heap the HEAP
 * @param offset the offset
 */
export function utf8ToString(heap: Uint8Array, offset: number) {
  let s = '';
  for (let i = offset; heap[i]; i++) {
    s += String.fromCharCode(heap[i]);
  }
  return s;
}